package launch

import (
	"flag"
	"os"

	"github.com/wlf92/torch/pkg/log"

	"gopkg.in/yaml.v3"
)

var Config = &AutoGenerated{}

func init() {
	def := flag.String("launch", "../launch.yaml", "Specify the launch file path")

	bts, err := os.ReadFile(*def)
	if err != nil {
		log.Fatalf("load launch file fail")
	}
	err = yaml.Unmarshal(bts, Config)
	if err != nil {
		log.Fatalf("load launch file fail")
	}
}

type AutoGenerated struct {
	Gate   Gate   `yaml:"gate"`
	Node   []Node `yaml:"node"`
	Consul Consul `yaml:"consul"`
	Sql    []Sql  `yaml:"sql"`
	Rds    Rds    `yaml:"rds"`
}
type Gate struct {
	RPCPort int `yaml:"rpc_port"`
	WsPort  int `yaml:"ws_port"`
}
type Node struct {
	Name    string `yaml:"name"`
	RPCPort int    `yaml:"rpc_port"`
}
type Consul struct {
	Addr                           string `yaml:"addr"`
	HealthCheck                    bool   `yaml:"healthCheck"`
	HealthCheckInterval            int    `yaml:"healthCheckInterval"`
	HealthCheckTimeout             int    `yaml:"healthCheckTimeout"`
	HeartbeatCheck                 bool   `yaml:"heartbeatCheck"`
	HeartbeatCheckInterval         int    `yaml:"heartbeatCheckInterval"`
	DeregisterCriticalServiceAfter int    `yaml:"deregisterCriticalServiceAfter"`
}
type Sql struct {
	Host                  string `yaml:"host"`
	Username              string `yaml:"username"`
	Password              string `yaml:"password"`
	MaxIdleConnections    int    `yaml:"maxIdleConnections"`
	MaxOpenConnections    int    `yaml:"maxOpenConnections"`
	MaxConnectionLifeTime int    `yaml:"maxConnectionLifeTime"`
	LogLevel              int    `yaml:"logLevel"`
	Db                    string `yaml:"db"`
}
type Rds struct {
	Addrs      []string `yaml:"addrs"`
	Username   string   `yaml:"username"`
	Password   string   `yaml:"password"`
	MaxRetries int      `yaml:"maxRetries"`
}

func (cf *AutoGenerated) GetNodeByName(name string) *Node {
	for _, v := range cf.Node {
		if v.Name == name {
			return &v
		}
	}
	return nil
}

func (cf *AutoGenerated) GetSqlByDb(db string) *Sql {
	for _, v := range cf.Sql {
		if v.Db == db {
			return &v
		}
	}
	return nil
}
